#!/usr/bin/perl
# chkconfig: 2345 81 30
use strict;
use warnings;

use OESS::Config;

use AnyEvent;
use AnyEvent::DBus;
use Net::DBus::Annotation qw(:call);
use Log::Log4perl;
use constant FWDCTL_WAITING     => 2;
use constant FWDCTL_SUCCESS     => 1;
use constant FWDCTL_FAILURE     => 0;
use constant FWDCTL_UNKNOWN     => 3;

my $config = new OESS::Config;

sub main{
    my $option = shift;

    Log::Log4perl::init('/etc/oess/logging.conf');

    if($option eq 'stop'){
        exit(stop());
    }elsif($option eq 'start'){
        exit(start());
    }elsif($option eq 'status'){
        my $status = status();
        exit($status);
    }elsif($option eq 'validate-all'){
        my $status = status();
        # short circuit - if status says it isn't running, there's no reason to go any further
        if($status != 0){
            exit($status);
        }
        $status = check_fwdctl();
        if($status != 0){
            exit($status);
        }

        $status = check_nox();
        if($status != 0){
            exit($status);
        }

        print "Everything is working properly\n";
        exit(0);

    }elsif($option eq 'restart'){
        my $res1 = stop();
        my $res2 = start();
        exit($res2);
    }elsif($option eq 'monitor'){
        my $status = status();
        if($status == 3){
            exit(7);
        }elsif($status != 0){
            exit(1);
        }else{
            exit(0);
        }            
    }elsif($option eq 'meta-data'){
        my $str = << 'END';
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="OESS" version="0.1">
  <version>1.1.6</version>
  <longdesc lang="en">
This is a Resource Agent for managing OESS and its components
  </longdesc>
  <shortdesc lang="en">This isa Resource Agent for managing OESS and its components</shortdesc>
  <actions>
    <action name="start"        timeout="20" />
    <action name="stop"         timeout="20" />
    <action name="monitor"      timeout="20"
                                interval="10" depth="0" />
    <action name="restart"      timeout="20" />
    <action name="validate-all" timeout="30" />
    <action name="meta-data"    timeout="5" />
  </actions>
</resource-agent>
END
print $str . "\n";
        exit(0);

    }else{
        usage();
    }
}

sub status {
    my $result = 0;

    if ($config->openflow_enabled) {

        if ($config->fwdctl_enabled) {
            my $res = system("/etc/init.d/oess-fwdctl status");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->fvd_enabled) {
            my $res = system("/etc/init.d/oess-fvd status");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->nox_enabled) {
            my $res = system("/etc/init.d/oess-nox status");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->traceroute_enabled) {
            my $res = system("/etc/init.d/oess-traceroute status");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->vlan_stats_enabled) {
            my $res = system("/etc/init.d/oess-vlan_stats status");
            if ($res != 0) {
                $result = $res;
            }
        }

    } else {

        if ($config->mpls_discovery_enabled) {
            my $res = system("/etc/init.d/oess-mpls-discovery status");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->mpls_fwdctl_enabled) {
            my $res = system("/etc/init.d/oess-mpls-fwdctl status");
            if ($res != 0) {
                $result = $res;
            }
        }

    }

    if ($config->notification_enabled) {
        my $res = system("/etc/init.d/oess-notification status");
        if ($res != 0) {
            $result = $res;
        }
    }
    if ($config->nsi_enabled) {
        my $res = system("/etc/init.d/oess-nsi status");
        if ($res != 0) {
            $result = $res;
        }
    }
    if ($config->watchdog_enabled) {
        my $res = system("/etc/init.d/oess-watchdog status");
        if ($res != 0) {
            $result = $res;
        }
    }

    #cause this is how wait work?
    return $result / 256;

}

sub stop {
    my $result = 0;

    if ($config->openflow_enabled) {

        if ($config->fwdctl_enabled) {
            my $res = system("/etc/init.d/oess-fwdctl stop");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->fvd_enabled) {
            my $res = system("/etc/init.d/oess-fvd stop");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->nox_enabled) {
            my $res = system("/etc/init.d/oess-nox stop");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->traceroute_enabled) {
            my $res = system("/etc/init.d/oess-traceroute stop");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->vlan_stats_enabled) {
            my $res = system("/etc/init.d/oess-vlan_stats stop");
            if ($res != 0) {
                $result = $res;
            }
        }

    } else {

        if ($config->mpls_discovery_enabled) {
            my $res = system("/etc/init.d/oess-mpls-discovery stop");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->mpls_fwdctl_enabled) {
            my $res = system("/etc/init.d/oess-mpls-fwdctl stop");
            if ($res != 0) {
                $result = $res;
            }
        }

    }

    if ($config->notification_enabled) {
        my $res = system("/etc/init.d/oess-notification stop");
        if ($res != 0) {
            $result = $res;
        }
    }
    if ($config->nsi_enabled) {
        my $res = system("/etc/init.d/oess-nsi stop");
        if ($res != 0) {
            $result = $res;
        }
    }
    if ($config->watchdog_enabled) {
        my $res = system("/etc/init.d/oess-watchdog stop");
        if ($res != 0) {
            $result = $res;
        }
    }

    #cause this is how wait work?
    return $result / 256;
}

sub start {
    my $result = 0;

    if ($config->openflow_enabled) {

        if ($config->fwdctl_enabled) {
            my $res = system("/etc/init.d/oess-fwdctl start");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->fvd_enabled) {
            my $res = system("/etc/init.d/oess-fvd start");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->nox_enabled) {
            my $res = system("/etc/init.d/oess-nox start");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->traceroute_enabled) {
            my $res = system("/etc/init.d/oess-traceroute start");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->vlan_stats_enabled) {
            my $res = system("/etc/init.d/oess-vlan_stats start");
            if ($res != 0) {
                $result = $res;
            }
        }

    } else {

        if ($config->mpls_discovery_enabled) {
            my $res = system("/etc/init.d/oess-mpls-discovery start");
            if ($res != 0) {
                $result = $res;
            }
        }
        if ($config->mpls_fwdctl_enabled) {
            my $res = system("/etc/init.d/oess-mpls-fwdctl start");
            if ($res != 0) {
                $result = $res;
            }
        }

    }

    if ($config->notification_enabled) {
        my $res = system("/etc/init.d/oess-notification start");
        if ($res != 0) {
            $result = $res;
        }
    }
    if ($config->nsi_enabled) {
        my $res = system("/etc/init.d/oess-nsi start");
        if ($res != 0) {
            $result = $res;
        }
    }
    if ($config->watchdog_enabled) {
        my $res = system("/etc/init.d/oess-watchdog start");
        if ($res != 0) {
            $result = $res;
        }
    }

    #cause this is how wait work?
    return $result / 256;
}

sub connect_fwdctl{

    #check FWDCTL
    my $bus = Net::DBus->system;

    my $client;
    my $service;

    eval {
        $service = $bus->get_service("org.nddi.fwdctl");
        $client  = $service->get_object("/controller1");
    };

    if ($@) {
        return 1;
    }

    if ( !defined $client ) {
        return 1;
    }

    return $client;
}

sub check_fwdctl{
    my $client = connect_fwdctl();

    my $result;
    my $event_id;

    eval{
        ($result,$event_id) = $client->check_child_status();
    };

    if(!defined($result) || $result != 1 || !defined($event_id)){
        #basically means not ready
        return 1;
    }

    my $final_res = FWDCTL_WAITING;

    my $timeout = 0;
    while($final_res == FWDCTL_WAITING && $timeout < 30){
        sleep(1);
        $final_res = $client->get_event_status($event_id);
        $timeout++;
    }

    if($final_res != FWDCTL_SUCCESS){
        print "FWDCTL failed to reply with success\n";
        return 1;
    }else{
        print "FWDCTL responded and all children are working!\n";
        return 0;
    }

}

sub check_nox{

    #check FWDCTL
    my $bus = Net::DBus->system;

    my $client;
    my $service;

    #check NOX
    eval {
        $service = $bus->get_service("org.nddi.openflow");
        $client  = $service->get_object("/controller1");
    };

    if ($@) {
        warn "Error in _connect_to_nox: $@";
        return 1;
    }

    if ( !defined $client ) {
        return 1;
    }

    my $result;
    eval{
        $result = $client->echo();
    };

    if($result != 1){
        return 1;
    }else{
        print "NOX replied to our echo request, it is working!\n";
    }

    return 0;

}

sub usage{
    print "Usage: $0 [start|stop|restart|status|monitor|meta-data|validate-all]\n";
    exit(3);
}

my $option = $ARGV[0];

usage() if (!defined($option));

main($option);
