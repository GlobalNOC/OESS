#!/usr/bin/perl

use strict;
use warnings;

use Term::ReadKey;
use Getopt::Long;
use Text::CSV;
use Data::Dumper;

use GRNOC::WebService::Client;

#--- variables
my $username;
my $password;
my $circuit_csv_location;
my $circuit_pre_verify;
my $oess_host;
my $help;

my @provisioned_circuits;
my $workgroups;

#--- CSV Structure
use constant {
    WORKGROUP          => 0,
    DESCRIPTION        => 1,
    BANDWIDTH          => 2,
    PROVISION_TIME     => 3,
    REMOVE_TIME        => 4,
    LINK               => 5,
    BACKUP_LINK        => 6,
    NODES              => 7,
    INTERFACES         => 8,
    TAGS               => 9,
    RESTORE_TO_PRIMARY => 10
};

#--- command line input
GetOptions(
    "csv=s"       => \$circuit_csv_location,
    "oess_host=s" => \$oess_host,
    "v|verify"    => \$circuit_pre_verify,
    "h|help"      => \$help
);

if($help || !$circuit_csv_location || !$oess_host){
    &usage();
}

if(! -e $circuit_csv_location){
    die("File $circuit_csv_location does not exist.");
}

$username = get_input("Username");
$password = get_input("Password", 1, undef);
print "\n";

#--- instantiate WebService Clients
my $data_websvc = new GRNOC::WebService::Client(
    url => "https://$oess_host/oess/services/data.cgi",
    uid => $username,
    passwd => $password,
    realm => 'OESS'
    );

my $provision_websvc = new GRNOC::WebService::Client(
    url => "https://$oess_host/oess/services/provisioning.cgi",
    uid => $username,
    passwd => $password,
    realm => 'OESS'
    );

#--- open the CSV and read from it.
my $csv = new Text::CSV();

open(my $csv_fh, "<:encoding(utf8)", $circuit_csv_location) or die($!);

#--- loop over each line
while(my $line = $csv->getline($csv_fh)){
    #--- sanity check contents
    my $workgroup          = $line->[WORKGROUP];
    my $description        = $line->[DESCRIPTION];
    my $bandwidth          = $line->[BANDWIDTH];
    my $provision_time     = $line->[PROVISION_TIME];
    my $remove_time        = $line->[REMOVE_TIME];
    my @link               = split(/,/,$line->[LINK]);
    my @backup_link        = split(/,/,$line->[BACKUP_LINK]);
    my @nodes              = split(/,/,$line->[NODES]);
    my @interfaces         = split(/,/,$line->[INTERFACES]);
    my @tags               = split(/,/,$line->[TAGS]);
    my $restore_to_primary = $line->[RESTORE_TO_PRIMARY];

    #--- get the workgroup id
    my $workgroup_id = get_workgroup_id_by_name($workgroup);

    if(!$workgroup_id){
        print "Unable to find workgroup $workgroup.\n";

        my %opts;
        my $input = get_input("Skip? (y/n)", undef, '^(y|n|yes|no)$');

        if($input =~ /y/i){
            next;
        }
        else{
            &quit();
        }
    }

    #--- ask user to verify if circuit_pre_verify is enabled
    if($circuit_pre_verify){
        print "Please verify the following before sending request.\n";
        print "workgroup = $workgroup ($workgroup_id)\n";
        print "description = $description\n";
        print "bandwidth = $bandwidth\n";
        print "provision_time = $provision_time\n";
        print "remove_time = $remove_time\n";
        print "link = " . join(" " , @link) . "\n";
        print "backup_link = " . join(" " , @backup_link) . "\n";
        print "nodes = " . join(" " , @nodes) . "\n";
        print "interfaces = " . join(" " , @interfaces) . "\n";
        print "tags = " . join(" " , @tags) . "\n";
        print "restore to primary = $restore_to_primary\n";

        my $input = get_input("Is this correct? (y/n)", undef, '^(y|n|yes|no)$');

        if($input !~ /y/i){
            $input = get_input("Skip? (y/n)", undef, '^(y|n|yes|no)$');

            if($input =~ /y/i){
                next;
            }
            else{
                &quit();
            }
        }
        print "#########################################\n";
    }

    #--- send provision request to OESS services
    my $provision_result = $provision_websvc->remote_request(
        action => 'provision_circuit',
        workgroup_id => $workgroup_id,
        circuit_id => -1,
        description => $description,
        bandwidth => $bandwidth,
        provision_time => $provision_time,
        remove_time => $remove_time,
        link => \@link,
        backup_link => \@backup_link,
        node => \@nodes,
        interface => \@interfaces,
        tag => \@tags,
        resotre_to_primary => $restore_to_primary
        );

    #--- check results and notify user
    if(!$provision_result){
        die("Error talking to OESS: " . $provision_websvc->get_error());
    }

    #--- if error offer to remove previously provisioned circuits
    if($provision_result->{'error'}){
        print $provision_result->{'error'} . "\n";
        
        my $input = get_input("Skip? (y/n)", undef, '^(y|n|yes|no)$');
        
        if($input =~ /y/i){
            next;
        }
        else{
            &quit();
        }
    }

    #--- save the id in case we need to back it out later.
    push(@provisioned_circuits, {circuit_id => $provision_result->{'results'}->{'circuit_id'}, workgroup_id => $workgroup_id});

    print "Successfully provisioned circuit. Circuit ID = $provision_result->{'results'}->{'circuit_id'}\n";

}

sub quit {
    if(scalar(@provisioned_circuits)){
        my $input = get_input("Remove circuits provisioned this run? (y/n)", undef, '^(y|n|yes|no)$');
        if($input =~ /y/i){
            &undo_adds();
            die();
        }
        else{
            die();
        }
    }
    else{
        die();
    }
}

sub undo_adds {
    foreach my $circuit (@provisioned_circuits){
        my $remove_result = $provision_websvc->remote_request(
            action => 'remove_circuit',
            circuit_id => $circuit->{'circuit_id'},
            remove_time => -1,
            workgroup_id => $circuit->{'workgroup_id'}
            );

        if(!$remove_result){
            print "Error removing circuit $circuit->{'circuit_id'}: " . $provision_websvc->get_error() . "\n";
        }
        elsif(!$remove_result->{'results'}->[0]->{'success'}){
            print "Error removing circuit $circuit->{'circuit_id'}";
        }
        else {
            print "Removed Circuit $circuit->{'circuit_id'}\n";
        }
    }

    print "Done Removing Circuits\n";
}

sub get_workgroup_id_by_name {
    my $workgroup_name = shift;

    if(!$workgroups){
        my $result = $data_websvc->remote_request(
            action => 'get_workgroups'
            );
        
        if(!$result){
            die("Error talking to OESS: " . $data_websvc->get_error());
        }
        
        if(!$result->{'results'}){
            die("Error finding workgroups.");
        }
        
        $workgroups = $result->{'results'};
    }

    foreach my $workgroup (@$workgroups){
        if($workgroup_name eq $workgroup->{'name'}){
            return $workgroup->{'workgroup_id'};
        }
    }
    
    return;
}

sub get_input {
    my $prompt  = shift;
    my $noecho  = shift;
    my $pattern = shift;

    while (1){
        print $prompt;
        
        if ($noecho){
            print " (noecho)";
            ReadMode 'noecho';
        }

        print ": ";

        my $value = <STDIN>;

        ReadMode 'normal';

        chomp $value;

        if ($pattern){
            if ($value =~ /$pattern/){
                return $value;
            }
            print "Sorry, value must be like \"$pattern\". Try again.\n";
            next;
        }

        return $value;
    }
}

sub usage {
    print "$0 --csv <csv location> --oess_host <fqdn of your oess host> [--v|verify script will ask user to verify details before sending provision requests] [--h|help]\n";
    exit();
}
