#!/usr/bin/perl
#-------------------------------------------------------------------
#----- OESS 2.0.7 - 2.0.8 upgrade module                         
#-----                                                               
#----- Copyright(C) 2010 The Trustees of Indiana University          
#--------------------------------------------------------------------
#----- $HeadURL: $                                                   
#----- $Id: $                                                        
#-----                                                               
#----- This is run when upgrading the database from     
#----- version 2.0.7 to version 2.0.8                               
#-------------------------------------------------------------------- 

use strict;
use warnings;
use OESS::Database;

my $prev_version = "2.0.7";
my $version = "2.0.8";

sub main{
    print "*******************************************************************\n";
    print "*********             OESS DB UPGRADE           ************\n";
    print "*******************************************************************\n";
    print "********* This will upgrade from $prev_version to $version **********\n";
    print "********* of the OESS DB any other version will not work ************\n";
    
    continue_parameter("Do you wish to continue");
    
    my $dbq = new OESS::Database();
    my $current_version = $dbq->get_oess_schema_version();    
    if($current_version eq $prev_version){
        $dbq->{'dbh'}->begin_work();
        upgrade($dbq);
        $dbq->{'dbh'}->commit();
    } else{
        print "Wrong version of OESS DB\n";
        print "This script only upgrades from version $prev_version to $version\n";
        exit;
    }
    
    print STDERR "Upgrade Successful!!\n";
}


sub upgrade{
    my $dbq = shift;
    my $term = shift;
    my $dbh = $dbq->{'dbh'};
    my $str;
    my $sth;

    # Set default bandwidth of all Endpoints to non-null integer zero.
    $sth = $dbh->prepare("UPDATE vrf_ep SET bandwidth=0 WHERE state='active' and bandwidth is NULL") or die "Unable to prepare bandwidth cleanup on vrf_ep\n";
    $sth->execute() or die "Unable to cleanup bandwidth on vrf_ep\n";

    $sth = $dbh->prepare("ALTER TABLE `vrf_ep` MODIFY `bandwidth` int(10) DEFAULT 0") or die "Unable to prepare update bandwidth column on vrf_ep\n";
    $sth->execute() or die "Unable to update bandwidth column on vrf_ep\n";

    $sth = $dbh->prepare("UPDATE circuit_edge_interface_membership SET bandwidth=0 WHERE end_epoch=-1 and bandwidth is NULL") or die "Unable to prepare bandwidth cleanup on circuit_edge_interface_membership\n";
    $sth->execute() or die "Unable to cleanup bandwidth on circuit_edge_interface_membership\n";

    $sth = $dbh->prepare("ALTER TABLE `circuit_edge_interface_membership` MODIFY `bandwidth` int(10) DEFAULT 0") or die "Unable to prepare update bandwidth column on circuit_edge_interface_membership\n";
    $sth->execute() or die "Unable to update bandwidth column on circuit_edge_interface_membership\n";

    # Update oess version.
    $str = "update oess_version set version = '$version'";
    $sth = $dbh->prepare($str) or die "Unable to prepare version update \n";
    $sth->execute() or die "Unable to update version\n";
}

main();

sub continue_parameter {
    my $name = shift;

    print "$name [y/n]: ";
    my $yes_or_no = <>;
    chomp($yes_or_no);

    exit(0) if ($yes_or_no !~ /y/i || $yes_or_no =~ /n/i);
}

sub required_parameter {
    my $name = shift;

    while (1) {
	print "$name (required): ";
        my $response = <>;
	chomp($response);

        return $response if ($response);

	print "\nThis option is required!\n\n";
    }
}
